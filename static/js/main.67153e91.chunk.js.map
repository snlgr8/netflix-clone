{"version":3,"sources":["axios.js","Row.jsx","request.js","Banner.jsx","Nav.jsx","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","original_name","then","url","urlParams","URLSearchParams","URL","search","catch","err","console","log","handlClick","key","id","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOrignals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanticMovies","Banner","setMovie","req","randomIndex","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","overview","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.67153e91.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://api.themoviedb.org/3/',\r\n});\r\n\r\nexport default instance;\r\n","import React, { useEffect, useState } from 'react';\r\nimport YouTube from 'react-youtube';\r\nimport axios from './axios';\r\nimport movieTrailer from 'movie-trailer';\r\nimport './Row.css';\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState('');\r\n  const imageBaseUrl = 'https://image.tmdb.org/t/p/original/';\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n  const opts = {\r\n    height: '390',\r\n    width: '100%',\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n  };\r\n  const handlClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl('');\r\n    } else\r\n      movieTrailer(movie?.name || movie?.title || movie?.original_name || '')\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get('v'));\r\n        })\r\n        .catch((err) => console.log(err));\r\n  };\r\n  return (\r\n    <div className='row'>\r\n      <h1 className='title'>{title}</h1>\r\n      <div className='row_posters'>\r\n        {movies.map((movie) => (\r\n          <img\r\n            onClick={() => handlClick(movie)}\r\n            key={movie.id}\r\n            className={`row_poster ${isLargeRow && 'row_poster_large'}`}\r\n            src={`${imageBaseUrl}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = '000bf6ec44d39b335b61a66acb9ae8c2';\r\nconst requests = {\r\n  fetchTrending: `/trending/all/day?api_key=${API_KEY}`,\r\n  fetchNetflixOrignals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanticMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n};\r\nexport default requests;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from './axios';\r\nimport './Banner.css';\r\nimport requests from './request';\r\n\r\nconst Banner = () => {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const req = await axios.get(requests.fetchNetflixOrignals);\r\n      const randomIndex = Math.floor(\r\n        Math.random() * req.data.results.length - 1\r\n      );\r\n      setMovie(req.data.results[randomIndex]);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <header\r\n      className='banner'\r\n      style={{\r\n        backgroundSize: 'cover',\r\n        backgroundImage: `url(\r\n          https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\r\n        )`,\r\n        backgroundPosition: 'center center',\r\n      }}\r\n    >\r\n      <div className='banner_contents'>\r\n        <h1 className='banner_title'>\r\n          {movie?.name || movie?.original_name || movie?.title}\r\n        </h1>\r\n        <div className='banner_buttons'>\r\n          <button className='banner_button'>Play</button>\r\n          <button className='banner_button'>My List</button>\r\n        </div>\r\n\r\n        <h1 className='banner_description'>{movie?.overview}</h1>\r\n      </div>\r\n      <div className='banner-fade-bottom'></div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Nav.css';\r\n\r\nconst Nav = () => {\r\n  const [show, handleShow] = useState(false);\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', () => {\r\n      if (window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else handleShow(false);\r\n    });\r\n    return () => {\r\n      window.removeEventListener('scroll');\r\n    };\r\n  }, []);\r\n  console.log(show);\r\n  return (\r\n    <div className={`nav ${show && 'nav_black'}`}>\r\n      <img\r\n        src='https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg'\r\n        alt='Netflix logo'\r\n        className='nav_logo'\r\n      />\r\n      <img\r\n        src='https://pbs.twimg.com/media/CW2i0pJW4AEYFI3?format=png&name=360x360'\r\n        alt='Nrtflix Avatar'\r\n        className='nav_avatar'\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './request';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Nav />\n      <Banner />\n\n      <Row\n        className='row'\n        title='Netflix Originals'\n        fetchUrl={requests.fetchNetflixOrignals}\n        isLargeRow\n      />\n      <Row className='row' title='Trending' fetchUrl={requests.fetchTrending} />\n      <Row\n        className='row'\n        title='Top rated'\n        fetchUrl={requests.fetchTopRated}\n      />\n      <Row\n        className='row'\n        title='Horror Movies'\n        fetchUrl={requests.fetchHorrorMovies}\n      />\n      <Row\n        className='row'\n        title='Action Movies'\n        fetchUrl={requests.fetchActionMovies}\n      />\n      <Row\n        className='row'\n        title='Comedy Movies'\n        fetchUrl={requests.fetchComedyMovies}\n      />\n      <Row\n        className='row'\n        title='Romantic Movies'\n        fetchUrl={requests.fetchRomanticMovies}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}